{"version":3,"sources":["webpack:///src/app/modules/auth/_models/user.model.ts","webpack:///src/app/modules/auth/auth-routing.module.ts","webpack:///src/app/modules/auth/auth.component.ts","webpack:///src/app/modules/auth/auth.component.html","webpack:///src/app/modules/auth/auth.module.ts","webpack:///src/app/modules/auth/forgot-password/forgot-password.component.ts","webpack:///src/app/modules/auth/forgot-password/forgot-password.component.html","webpack:///src/app/modules/auth/login/login.component.ts","webpack:///src/app/modules/auth/login/login.component.html","webpack:///src/app/modules/auth/logout/logout.component.ts","webpack:///src/app/modules/auth/logout/logout.component.html","webpack:///src/app/modules/auth/registration/confirm-password.validator.ts","webpack:///src/app/modules/auth/registration/registration.component.ts","webpack:///src/app/modules/auth/registration/registration.component.html"],"names":["UserModel","user","id","username","password","fullname","email","pic","roles","occupation","companyName","phone","address","socialNetworks","routes","path","component","children","redirectTo","pathMatch","data","returnUrl","window","location","pathname","AuthRoutingModule","forChild","imports","exports","AuthComponent","today","Date","selector","templateUrl","styleUrls","AuthModule","declarations","ErrorStates","ForgotPasswordComponent","fb","authService","errorState","NotSubmitted","errorStates","unsubscribe","isLoading$","initForm","forgotPasswordForm","group","compose","required","minLength","maxLength","forgotPasswordSubscr","forgotPassword","f","value","pipe","subscribe","result","NoError","HasError","push","controls","submit","LoginComponent","route","router","defaultAuth","currentUserValue","navigate","snapshot","queryParams","toString","loginForm","hasError","loginSubscr","login","forEach","sb","LogoutComponent","logout","ConfirmPasswordValidator","control","get","confirmPassword","setErrors","ConfirmPassword","RegistrationComponent","registrationForm","cPassword","agree","validator","MatchPassword","Object","keys","key","newUser","setUser","registrationSubscr","registration"],"mappings":"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","file":"modules-auth-auth-module-es5.js","sourcesContent":["import { AuthModel } from './auth.model';\r\nimport { AddressModel } from './address.model';\r\nimport { SocialNetworksModel } from './social-networks.model';\r\n\r\nexport class UserModel extends AuthModel {\r\n  id: number;\r\n  username: string;\r\n  password: string;\r\n  fullname: string;\r\n  email: string;\r\n  pic: string;\r\n  roles: number[];\r\n  occupation: string;\r\n  companyName: string;\r\n  phone: string;\r\n  address?: AddressModel;\r\n  socialNetworks?: SocialNetworksModel;\r\n\r\n  setUser(user: any) {\r\n    this.id = user.id;\r\n    this.username = user.username || '';\r\n    this.password = user.password || '';\r\n    this.fullname = user.fullname || '';\r\n    this.email = user.email || '';\r\n    this.pic = user.pic || './assets/media/users/default.jpg';\r\n    this.roles = user.roles || [];\r\n    this.occupation = user.occupation || '';\r\n    this.companyName = user.companyName || '';\r\n    this.phone = user.phone || '';\r\n    this.address = user.address;\r\n    this.socialNetworks = user.socialNetworks;\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {AuthComponent} from './auth.component';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {RegistrationComponent} from './registration/registration.component';\r\nimport {ForgotPasswordComponent} from './forgot-password/forgot-password.component';\r\nimport {LogoutComponent} from './logout/logout.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AuthComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'login',\r\n        pathMatch: 'full'\r\n      },\r\n      {\r\n        path: 'login',\r\n        component: LoginComponent,\r\n        data: {returnUrl: window.location.pathname}\r\n      },\r\n      {\r\n        path: 'registration',\r\n        component: RegistrationComponent\r\n      },\r\n      {\r\n        path: 'forgot-password',\r\n        component: ForgotPasswordComponent\r\n      },\r\n      {\r\n        path: 'logout',\r\n        component: LogoutComponent\r\n      },\r\n      {path: '', redirectTo: 'login', pathMatch: 'full'},\r\n      {path: '**', redirectTo: 'login', pathMatch: 'full'},\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forChild(routes) ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.scss']\r\n})\r\nexport class AuthComponent implements OnInit {\r\n\r\n  today: Date = new Date();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"d-flex flex-column flex-root h-100\" id=\"kt_login_wrapper\">\r\n  <!--begin::Login-->\r\n  <div class=\"login login-1 login-signin-on d-flex flex-column flex-lg-row flex-column-fluid bg-white\" id=\"kt_login\">\r\n    <!--begin::Aside-->\r\n    <div class=\"login-aside d-flex flex-column flex-row-auto\" style=\"background-color: #F2C98A;\">\r\n      <!--begin::Aside Top-->\r\n      <div class=\"d-flex flex-column-auto flex-column pt-lg-40 pt-15\">\r\n        <!--begin::Aside header-->\r\n        <a href=\"#\" class=\"text-center mb-10\">\r\n          <img src=\"./assets/media/logos/logo-letter-1.png\" class=\"max-h-70px\" alt=\"\" />\r\n        </a>\r\n        <!--end::Aside header-->\r\n\r\n        <!--begin::Aside title-->\r\n        <h3 class=\"font-weight-bolder text-center font-size-h4 font-size-h1-lg\" style=\"color: #986923;\">\r\n          Discover Amazing Metronic<br />\r\n          with great build tools\r\n        </h3>\r\n        <!--end::Aside title-->\r\n      </div>\r\n      <!--end::Aside Top-->\r\n\r\n      <!--begin::Aside Bottom-->\r\n      <div class=\"aside-img d-flex flex-row-fluid bgi-no-repeat bgi-position-y-bottom bgi-position-x-center\"\r\n        style=\"background-image: url('./assets/media/svg/illustrations/login-visual-1.svg')\"></div>\r\n      <!--end::Aside Bottom-->\r\n    </div>\r\n    <!--begin::Aside-->\r\n\r\n    <!--begin::Content-->\r\n    <div\r\n      class=\"login-content flex-row-fluid d-flex flex-column justify-content-center position-relative overflow-hidden p-7 mx-auto\">\r\n      <!--begin::Content body-->\r\n      <div class=\"d-flex flex-column-fluid flex-center\">\r\n        <router-outlet></router-outlet>\r\n      </div>\r\n      <!--end::Content body-->\r\n\r\n      <!--begin::Content footer-->\r\n      <div class=\"d-flex justify-content-lg-start justify-content-center align-items-end py-7 py-lg-0\">\r\n        <a href=\"#\" class=\"text-primary font-weight-bolder font-size-h5\">Terms</a>\r\n        <a href=\"#\" class=\"text-primary ml-10 font-weight-bolder font-size-h5\">Plans</a>\r\n        <a href=\"#\" class=\"text-primary ml-10 font-weight-bolder font-size-h5\">Contact Us</a>\r\n      </div>\r\n      <!--end::Content footer-->\r\n    </div>\r\n    <!--end::Content-->\r\n  </div>\r\n  <!--end::Login-->\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegistrationComponent } from './registration/registration.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { LogoutComponent } from './logout/logout.component';\r\nimport { AuthComponent } from './auth.component';\r\nimport {TranslationModule} from '../i18n/translation.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    RegistrationComponent,\r\n    ForgotPasswordComponent,\r\n    LogoutComponent,\r\n    AuthComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TranslationModule,\r\n    AuthRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n  ]\r\n})\r\nexport class AuthModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { first } from 'rxjs/operators';\r\n\r\nenum ErrorStates {\r\n  NotSubmitted,\r\n  HasError,\r\n  NoError,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.scss'],\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  forgotPasswordForm: FormGroup;\r\n  errorState: ErrorStates = ErrorStates.NotSubmitted;\r\n  errorStates = ErrorStates;\r\n  isLoading$: Observable<boolean>;\r\n\r\n  // private fields\r\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService\r\n  ) {\r\n    this.isLoading$ = this.authService.isLoading$;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.forgotPasswordForm.controls;\r\n  }\r\n\r\n  initForm() {\r\n    this.forgotPasswordForm = this.fb.group({\r\n      email: [\r\n        'admin@demo.com',\r\n        Validators.compose([\r\n          Validators.required,\r\n          Validators.email,\r\n          Validators.minLength(3),\r\n          Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\r\n        ]),\r\n      ],\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    this.errorState = ErrorStates.NotSubmitted;\r\n    const forgotPasswordSubscr = this.authService\r\n      .forgotPassword(this.f.email.value)\r\n      .pipe(first())\r\n      .subscribe((result: boolean) => {\r\n        this.errorState = result ? ErrorStates.NoError : ErrorStates.HasError;\r\n      });\r\n    this.unsubscribe.push(forgotPasswordSubscr);\r\n  }\r\n}\r\n","<div class=\"login-form login-forgot\">\r\n  <!--begin::Form-->\r\n  <form\r\n    class=\"form fv-plugins-bootstrap fv-plugins-framework\"\r\n    novalidate=\"novalidate\"\r\n    [formGroup]=\"forgotPasswordForm\"\r\n    (ngSubmit)=\"submit()\"\r\n    id=\"kt_login_forgot_form\"\r\n    [ngStyle]=\"{\r\n      display: errorState === errorStates.NoError ? 'none' : 'block'\r\n    }\"\r\n  >\r\n    <!--begin::Title-->\r\n    <div class=\"pb-13 pt-lg-0 pt-5\">\r\n      <h3 class=\"font-weight-bolder text-dark font-size-h4 font-size-h1-lg\">\r\n        Forgotten Password ?\r\n      </h3>\r\n      <p class=\"text-muted font-weight-bold font-size-h4\">\r\n        Enter your email to reset your password\r\n      </p>\r\n    </div>\r\n    <!--end::Title-->\r\n\r\n    <!-- begin::Alert error-->\r\n    <ng-container *ngIf=\"errorState === errorStates.HasError\">\r\n      <div\r\n        class=\"mb-10 alert alert-custom alert-light-danger alert-dismissible\"\r\n      >\r\n        <div class=\"alert-text\">The email detail is incorrect</div>\r\n      </div>\r\n    </ng-container>\r\n    <!-- end::Alert error-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group fv-plugins-icon-container has-danger\">\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\r\n        type=\"email\"\r\n        formControlName=\"email\"\r\n        placeholder=\"Email\"\r\n        name=\"email\"\r\n        autocomplete=\"off\"\r\n        [ngClass]=\"{\r\n          'is-invalid': forgotPasswordForm.controls['email'].invalid\r\n        }\"\r\n      />\r\n\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Email is required',\r\n          control: forgotPasswordForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'email',\r\n          message: 'Email is invalid',\r\n          control: forgotPasswordForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minLength',\r\n          message: 'Email should have at least 3 symbols',\r\n          control: forgotPasswordForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Email should have maximum 360 symbols',\r\n          control: forgotPasswordForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group d-flex flex-wrap pb-lg-0\">\r\n      <button\r\n        type=\"submit\"\r\n        id=\"kt_login_forgot_submit\"\r\n        class=\"btn btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-4\"\r\n      >\r\n        Submit\r\n      </button>\r\n      <a\r\n        routerLink=\"/auth/login\"\r\n        id=\"kt_login_forgot_cancel\"\r\n        class=\"btn btn-light-primary font-weight-bolder font-size-h6 px-8 py-4 my-3\"\r\n      >\r\n        Cancel\r\n      </a>\r\n\r\n      <ng-container *ngIf=\"isLoading$ | async\">\r\n        <span class=\"spinner spinner-primary ml-5\"></span>\r\n      </ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n    <div></div>\r\n  </form>\r\n  <!--end::Form-->\r\n\r\n  <ng-container *ngIf=\"errorState === errorStates.NoError\">\r\n    <div\r\n      class=\"card card-custom bgi-no-repeat gutter-b\"\r\n      style=\"\r\n        height: 175px;\r\n        background-color: #4ab58e;\r\n        background-position: calc(100% + 1rem) bottom;\r\n        background-size: 25% auto;\r\n        background-image: url(assets/media/svg/humans/custom-1.svg);\r\n      \"\r\n    >\r\n      <!--begin::Body-->\r\n      <div class=\"card-body d-flex align-items-center\">\r\n        <div class=\"py-2\">\r\n          <h3 class=\"text-white font-weight-bolder mb-3\">Email is correct!</h3>\r\n          <p class=\"text-white font-size-lg\">\r\n            Message with 'recovery' instruction<br />\r\n            has been sent<br />\r\n          </p>\r\n          <a\r\n            routerLink=\"/auth/login\"\r\n            class=\"swal2-confirm btn font-weight-bold btn-light-primary\"\r\n          >\r\n            Ok, got it!\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <!--end::Body-->\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n\r\n<ng-template\r\n  #formError\r\n  let-control=\"control\"\r\n  let-message=\"message\"\r\n  let-validation=\"validation\"\r\n>\r\n  <ng-container\r\n    *ngIf=\"control.hasError(validation) && (control.dirty || control.touched)\"\r\n  >\r\n    <div class=\"fv-plugins-message-container\">\r\n      <div class=\"fv-help-block\">\r\n        {{ message }}\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n","import { Component, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Subscription, Observable } from 'rxjs';\r\nimport { first } from 'rxjs/operators';\r\nimport { UserModel } from '../_models/user.model';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n  // KeenThemes mock, change it to:\r\n  // defaultAuth = {\r\n  //   email: '',\r\n  //   password: '',\r\n  // };\r\n  defaultAuth: any = {\r\n    email: 'admin@demo.com',\r\n    password: 'demo',\r\n  };\r\n  loginForm: FormGroup;\r\n  hasError: boolean;\r\n  returnUrl: string;\r\n  isLoading$: Observable<boolean>;\r\n\r\n  // private fields\r\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {\r\n    this.isLoading$ = this.authService.isLoading$;\r\n    // redirect to home if already logged in\r\n    if (this.authService.currentUserValue) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl =\r\n      this.route.snapshot.queryParams['returnUrl'.toString()] || '/';\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  initForm() {\r\n    this.loginForm = this.fb.group({\r\n      email: [\r\n        this.defaultAuth.email,\r\n        Validators.compose([\r\n          Validators.required,\r\n          Validators.email,\r\n          Validators.minLength(3),\r\n          Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\r\n        ]),\r\n      ],\r\n      password: [\r\n        this.defaultAuth.password,\r\n        Validators.compose([\r\n          Validators.required,\r\n          Validators.minLength(3),\r\n          Validators.maxLength(100),\r\n        ]),\r\n      ],\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    this.hasError = false;\r\n    const loginSubscr = this.authService\r\n      .login(this.f.email.value, this.f.password.value)\r\n      .pipe(first())\r\n      .subscribe((user: UserModel) => {\r\n        if (user) {\r\n          this.router.navigate([this.returnUrl]);\r\n        } else {\r\n          this.hasError = true;\r\n        }\r\n      });\r\n    this.unsubscribe.push(loginSubscr);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.unsubscribe.forEach((sb) => sb.unsubscribe());\r\n  }\r\n}\r\n","<!--begin::Signin-->\r\n<div class=\"login-form login-signin\">\r\n  <!--begin::Form-->\r\n  <form\r\n    class=\"form\"\r\n    [formGroup]=\"loginForm\"\r\n    novalidate=\"novalidate\"\r\n    id=\"kt_login_signin_form\"\r\n    (ngSubmit)=\"submit()\"\r\n  >\r\n    <!--begin::Title-->\r\n    <div class=\"pb-13 pt-lg-0 pt-5\">\r\n      <h3 class=\"font-weight-bolder text-dark font-size-h4 font-size-h1-lg\">\r\n        Welcome to Metronic\r\n      </h3>\r\n      <span class=\"text-muted font-weight-bold font-size-h4\"\r\n        >New Here?\r\n        <a\r\n          routerLink=\"/auth/registration\"\r\n          id=\"kt_login_signup\"\r\n          class=\"text-primary font-weight-bolder\"\r\n          >{{ \"AUTH.GENERAL.SIGNUP_BUTTON\" | translate }}</a\r\n        >\r\n      </span>\r\n    </div>\r\n    <!--end::Title-->\r\n\r\n    <!-- begin::Alert info-->\r\n    <ng-container *ngIf=\"!hasError\">\r\n      <div class=\"mb-10 alert alert-custom alert-light-info alert-dismissible\">\r\n        <div class=\"alert-text\">\r\n          Use account <strong>{{ defaultAuth.email }}</strong> and password\r\n          <strong>{{ defaultAuth.password }}</strong> to continue.\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n    <!-- end::Alert info-->\r\n\r\n    <!-- begin::Alert error-->\r\n    <ng-container *ngIf=\"hasError\">\r\n      <div\r\n        class=\"mb-10 alert alert-custom alert-light-danger alert-dismissible\"\r\n      >\r\n        <div class=\"alert-text\">The login details are incorrect</div>\r\n      </div>\r\n    </ng-container>\r\n    <!-- end::Alert error-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <label class=\"font-size-h6 font-weight-bolder text-dark\">Email</label>\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg\"\r\n        type=\"email\"\r\n        name=\"email\"\r\n        formControlName=\"email\"\r\n        autocomplete=\"off\"\r\n        [ngClass]=\"{ 'is-invalid': loginForm.controls['email'].invalid }\"\r\n      />\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Email is required',\r\n          control: loginForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'email',\r\n          message: 'Email is invalid',\r\n          control: loginForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minLength',\r\n          message: 'Email should have at least 3 symbols',\r\n          control: loginForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Email should have maximum 360 symbols',\r\n          control: loginForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <div class=\"d-flex justify-content-between mt-n5\">\r\n        <label class=\"font-size-h6 font-weight-bolder text-dark pt-5\"\r\n          >Password</label\r\n        >\r\n        <a\r\n          routerLink=\"/auth/forgot-password\"\r\n          class=\"text-primary font-size-h6 font-weight-bolder text-hover-primary pt-5\"\r\n          id=\"kt_login_forgot\"\r\n        >\r\n          Forgot Password ?\r\n        </a>\r\n      </div>\r\n\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg\"\r\n        type=\"password\"\r\n        name=\"password\"\r\n        autocomplete=\"off\"\r\n        formControlName=\"password\"\r\n        [ngClass]=\"{ 'is-invalid': loginForm.controls['password'].invalid }\"\r\n      />\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Password is required',\r\n          control: loginForm.controls['password']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minlength',\r\n          message: 'Password should have at least 3 symbols',\r\n          control: loginForm.controls['password']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Password should have maximum 100 symbols',\r\n          control: loginForm.controls['password']\r\n        }\"\r\n      ></ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Action-->\r\n    <div class=\"pb-lg-0 pb-5\">\r\n      <button\r\n        type=\"submit\"\r\n        id=\"kt_login_signin_submit\"\r\n        class=\"btn btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-3\"\r\n        [disabled]=\"loginForm.invalid\"\r\n      >\r\n        Sign In\r\n      </button>\r\n\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-light-primary font-weight-bolder px-8 py-4 my-3 font-size-lg\"\r\n      >\r\n        <span class=\"svg-icon svg-icon-md\">\r\n          <img src=\"./assets/media/svg/social-icons/google.svg\" />\r\n        </span>\r\n        Sign in with Google\r\n      </button>\r\n\r\n      <ng-container *ngIf=\"isLoading$ | async\">\r\n        <span class=\"spinner spinner-primary ml-5\"></span>\r\n      </ng-container>\r\n    </div>\r\n    <!--end::Action-->\r\n  </form>\r\n  <!--end::Form-->\r\n</div>\r\n<!--end::Signin-->\r\n\r\n<ng-template\r\n  #formError\r\n  let-control=\"control\"\r\n  let-message=\"message\"\r\n  let-validation=\"validation\"\r\n>\r\n  <ng-container\r\n    *ngIf=\"control.hasError(validation) && (control.dirty || control.touched)\"\r\n  >\r\n    <div class=\"fv-plugins-message-container\">\r\n      <div class=\"fv-help-block\">\r\n        {{ message }}\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../_services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-logout',\r\n  templateUrl: './logout.component.html',\r\n  styleUrls: ['./logout.component.scss'],\r\n})\r\nexport class LogoutComponent implements OnInit {\r\n  constructor(private authService: AuthService) {\r\n    this.authService.logout();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","<p>logout works!</p>\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\nexport class ConfirmPasswordValidator {\r\n  /**\r\n   * Check matching password with confirm password\r\n   * @param control AbstractControl\r\n   */\r\n  static MatchPassword(control: AbstractControl) {\r\n    const password = control.get('password').value;\r\n\r\n    const confirmPassword = control.get('cPassword').value;\r\n\r\n    if (password !== confirmPassword) {\r\n      control.get('cPassword').setErrors({ ConfirmPassword: true });\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Subscription, Observable } from 'rxjs';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { ConfirmPasswordValidator } from './confirm-password.validator';\r\nimport { UserModel } from '../_models/user.model';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.scss'],\r\n})\r\nexport class RegistrationComponent implements OnInit, OnDestroy {\r\n  registrationForm: FormGroup;\r\n  hasError: boolean;\r\n  isLoading$: Observable<boolean>;\r\n\r\n  // private fields\r\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.isLoading$ = this.authService.isLoading$;\r\n    // redirect to home if already logged in\r\n    if (this.authService.currentUserValue) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.registrationForm.controls;\r\n  }\r\n\r\n  initForm() {\r\n    this.registrationForm = this.fb.group(\r\n      {\r\n        fullname: [\r\n          '',\r\n          Validators.compose([\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            Validators.maxLength(100),\r\n          ]),\r\n        ],\r\n        email: [\r\n          'qwe@qwe.qwe',\r\n          Validators.compose([\r\n            Validators.required,\r\n            Validators.email,\r\n            Validators.minLength(3),\r\n            Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\r\n          ]),\r\n        ],\r\n        password: [\r\n          '',\r\n          Validators.compose([\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            Validators.maxLength(100),\r\n          ]),\r\n        ],\r\n        cPassword: [\r\n          '',\r\n          Validators.compose([\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            Validators.maxLength(100),\r\n          ]),\r\n        ],\r\n        agree: [false, Validators.compose([Validators.required])],\r\n      },\r\n      {\r\n        validator: ConfirmPasswordValidator.MatchPassword,\r\n      }\r\n    );\r\n  }\r\n\r\n  submit() {\r\n    this.hasError = false;\r\n    const result = {};\r\n    Object.keys(this.f).forEach(key => {\r\n      result[key] = this.f[key].value;\r\n    });\r\n    const newUser = new UserModel();\r\n    newUser.setUser(result);\r\n    const registrationSubscr = this.authService\r\n      .registration(newUser)\r\n      .pipe(first())\r\n      .subscribe((user: UserModel) => {\r\n        if (user) {\r\n          this.router.navigate(['/']);\r\n        } else {\r\n          this.hasError = true;\r\n        }\r\n      });\r\n    this.unsubscribe.push(registrationSubscr);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.unsubscribe.forEach((sb) => sb.unsubscribe());\r\n  }\r\n}\r\n","<!--begin::Signup-->\r\n<div class=\"login-form login-signup\">\r\n  <!--begin::Form-->\r\n  <form\r\n    class=\"form\"\r\n    novalidate=\"novalidate\"\r\n    id=\"kt_login_signup_form\"\r\n    [formGroup]=\"registrationForm\"\r\n    (ngSubmit)=\"submit()\"\r\n  >\r\n    <!--begin::Title-->\r\n    <div class=\"pb-13 pt-lg-0 pt-5\">\r\n      <h3 class=\"font-weight-bolder text-dark font-size-h4 font-size-h1-lg\">\r\n        Sign Up\r\n      </h3>\r\n      <p class=\"text-muted font-weight-bold font-size-h4\">\r\n        Enter your details to create your account\r\n      </p>\r\n    </div>\r\n    <!--end::Title-->\r\n\r\n    <!-- begin::Alert error-->\r\n    <ng-container *ngIf=\"hasError\">\r\n      <div\r\n        class=\"mb-10 alert alert-custom alert-light-danger alert-dismissible\"\r\n      >\r\n        <div class=\"alert-text\">The registration details are incorrect</div>\r\n      </div>\r\n    </ng-container>\r\n    <!-- end::Alert error-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <label class=\"font-size-h6 font-weight-bolder text-dark\">Fullname</label>\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\r\n        type=\"text\"\r\n        name=\"fullname\"\r\n        formControlName=\"fullname\"\r\n        placeholder=\"Fullname\"\r\n        autocomplete=\"off\"\r\n        [ngClass]=\"{\r\n          'is-invalid': registrationForm.controls['fullname'].invalid\r\n        }\"\r\n      />\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Fullname is required',\r\n          control: registrationForm.controls['fullname']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minlength',\r\n          message: 'Fullname should have at least 3 symbols',\r\n          control: registrationForm.controls['fullname']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Fullname should have maximum 100 symbols',\r\n          control: registrationForm.controls['fullname']\r\n        }\"\r\n      ></ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <label class=\"font-size-h6 font-weight-bolder text-dark\">Email</label>\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\r\n        type=\"email\"\r\n        placeholder=\"Email\"\r\n        name=\"email\"\r\n        formControlName=\"email\"\r\n        autocomplete=\"off\"\r\n        [ngClass]=\"{ 'is-invalid': registrationForm.controls['email'].invalid }\"\r\n      />\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Email is required',\r\n          control: registrationForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'email',\r\n          message: 'Email is invalid',\r\n          control: registrationForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minlength',\r\n          message: 'Email should have at least 3 symbols',\r\n          control: registrationForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Email should have maximum 360 symbols',\r\n          control: registrationForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <label class=\"font-size-h6 font-weight-bolder text-dark pt-5\"\r\n        >Password</label\r\n      >\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n        name=\"password\"\r\n        formControlName=\"password\"\r\n        autocomplete=\"off\"\r\n        [ngClass]=\"{\r\n          'is-invalid': registrationForm.controls['password'].invalid\r\n        }\"\r\n      />\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Password is required',\r\n          control: registrationForm.controls['password']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minlength',\r\n          message: 'Password should have at least 3 symbols',\r\n          control: registrationForm.controls['password']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Password should have maximum 100 symbols',\r\n          control: registrationForm.controls['password']\r\n        }\"\r\n      ></ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <label class=\"font-size-h6 font-weight-bolder text-dark pt-5\"\r\n        >Confirm Password</label\r\n      >\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\r\n        type=\"password\"\r\n        placeholder=\"Confirm password\"\r\n        name=\"cPassword\"\r\n        autocomplete=\"off\"\r\n        formControlName=\"cPassword\"\r\n        [ngClass]=\"{\r\n          'is-invalid': registrationForm.controls['cPassword'].invalid\r\n        }\"\r\n      />\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Confirm Password is required',\r\n          control: registrationForm.controls['cPassword']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minlength',\r\n          message: 'Confirm Password should have at least 3 symbols',\r\n          control: registrationForm.controls['cPassword']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Confirm Password should have maximum 100 symbols',\r\n          control: registrationForm.controls['cPassword']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        *ngIf=\"\r\n          registrationForm.controls['cPassword'].errors &&\r\n          registrationForm.controls['cPassword'].errors.ConfirmPassword\r\n        \"\r\n      >\r\n        <div class=\"fv-plugins-message-container\">\r\n          <div class=\"fv-help-block\">\r\n            'Passsword' and 'Confirm Password' didn't match.\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <label class=\"checkbox mb-0\">\r\n        <input type=\"checkbox\" formControlName=\"agree\" name=\"agree\" />&nbsp;I\r\n        Agree the&nbsp;<a\r\n          href=\"https://keenthemes.com/metronic/?page=faq\"\r\n          target=\"_blank\"\r\n          >terms and conditions</a\r\n        >.&nbsp;\r\n        <span></span>\r\n      </label>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group d-flex flex-wrap pb-lg-0 pb-3\">\r\n      <button\r\n        type=\"submit\"\r\n        id=\"kt_login_signup_submit\"\r\n        [disabled]=\"\r\n          registrationForm.invalid || !registrationForm.controls['agree'].value\r\n        \"\r\n        class=\"btn btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-4\"\r\n      >\r\n        Submit\r\n      </button>\r\n      <a\r\n        routerLink=\"/auth/login\"\r\n        type=\"button\"\r\n        id=\"kt_login_signup_cancel\"\r\n        class=\"btn btn-light-primary font-weight-bolder font-size-h6 px-8 py-4 my-3\"\r\n      >\r\n        Cancel\r\n      </a>\r\n\r\n      <ng-container *ngIf=\"isLoading$ | async\">\r\n        <span class=\"spinner spinner-primary ml-5\"></span>\r\n      </ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n  </form>\r\n  <!--end::Form-->\r\n</div>\r\n<!--end::Signup-->\r\n\r\n<ng-template\r\n  #formError\r\n  let-control=\"control\"\r\n  let-message=\"message\"\r\n  let-validation=\"validation\"\r\n>\r\n  <ng-container\r\n    *ngIf=\"control.hasError(validation) && (control.dirty || control.touched)\"\r\n  >\r\n    <div class=\"fv-plugins-message-container\">\r\n      <div class=\"fv-help-block\">\r\n        {{ message }}\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n"]}